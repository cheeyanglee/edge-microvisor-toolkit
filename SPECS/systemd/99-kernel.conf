# Number of kernel oopses after which the kernel should panic when panic_on_oops
# is not set. Setting this to 0 disables checking the count. Setting this to 1
# has the same effect as setting panic_on_oops=1. The default value is 10000.
kernel.oops_limit=100

# Number of kernel warnings after which the kernel should panic when panic_on_warn
# is not set. Setting this to 0 disables checking the warning count. Setting
# this to 1 has the same effect as setting panic_on_warn=1. The default value is 0.
kernel.warn_limit=100

# Controls use of the performance events system by unprivileged users (without
# CAP_PERFMON). The default value is 2.

# For backward compatibility reasons access to system performance monitoring
# and observability remains open for CAP_SYS_ADMIN privileged processes but
# CAP_SYS_ADMIN usage for secure system performance monitoring and observability
# operations is discouraged with respect to CAP_PERFMON use cases.
# Values:
# -1 : Allow use of (almost) all events by all users.
#      Ignore mlock limit after perf_event_mlock_kb without CAP_IPC_LOCK.
# >=0: Disallow ftrace function tracepoint by users without CAP_PERFMON.
#      Disallow raw tracepoint access by users without CAP_PERFMON.
# >=1: Disallow CPU event access by users without CAP_PERFMON.
# >=2: Disallow kernel profiling by users without CAP_PERFMON.
kernel.perf_event_paranoid=3

# This toggle indicates whether restrictions are placed on exposing kernel
# addresses via /proc and other interfaces.
#
# When kptr_restrict is set to 0 (the default) the address is hashed before
# printing. (This is the equivalent to %p.)
#
# When kptr_restrict is set to 1, kernel pointers printed using the %pK format
# specifier will be replaced with 0s unless the user has CAP_SYSLOG and effective
# user and group ids are equal to the real ids. This is because %pK checks are
# done at read() time rather than open() time, so if permissions are elevated
# between the open() and the read() (e.g via a setuid binary) then %pK will not
# leak kernel pointers to unprivileged users. Note, this is a temporary solution
# only. The correct long-term solution is to do the permission checks at open()
# time. Consider removing world read permissions from files that use %pK, and
# using dmesg_restrict to protect against uses of %pK in dmesg(8) if leaking kernel
# pointer values to unprivileged users is a concern.
#
# When kptr_restrict is set to 2, kernel pointers printed using %pK will be replaced
# with 0s regardless of privileges.
kernel.kptr_restrict=2

# Prevents all processes from creating new io_uring instances. Enabling this shrinks
# the kernelâ€™s attack surface.
# Values:
# 0: All processes can create io_uring instances as normal. This is the default setting.
# 1: io_uring creation is disabled (io_uring_setup() will fail with -EPERM) for unprivileged
#    processes not in the io_uring_group group. Existing io_uring instances can still be
#    used. See the documentation for io_uring_group for more information.
# 2: io_uring creation is disabled for all processes. io_uring_setup() always fails with
#    -EPERM. Existing io_uring instances can still be used.
kernel.io_uring_disabled=1
