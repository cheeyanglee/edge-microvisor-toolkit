From 64384f0b5f9cb5e4a533bf280bfa1bcaa1c866f5 Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Mon, 14 Oct 2024 15:04:29 -0700
Subject: [PATCH] ui/gtk: Enabling HW cursor

Blend guest's cursor plane with the guest frame when updating
the scanout. This feature is enabled when an gtk option, 'hw-cursor'
is set to true.

Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
---
 include/ui/gtk.h |  3 +++
 qapi/ui.json     |  7 ++++-
 qemu-options.hx  |  4 ++-
 ui/gtk-egl.c     | 69 +++++++++++++++++++++++++++++++++++++++++++-----
 ui/gtk.c         | 62 ++++++++++++++++++++++++++++++++-----------
 5 files changed, 120 insertions(+), 25 deletions(-)

diff --git a/include/ui/gtk.h b/include/ui/gtk.h
index 27ec688883..6f1f7557cf 100644
--- a/include/ui/gtk.h
+++ b/include/ui/gtk.h
@@ -52,6 +52,9 @@ typedef struct VirtualGfxConsole {
     egl_fb guest_fb;
     egl_fb win_fb;
     egl_fb cursor_fb;
+    uint32_t *cursor_image;
+    bool cursor_moved;
+    bool new_cursor;
     int cursor_x;
     int cursor_y;
     bool y0_top;
diff --git a/qapi/ui.json b/qapi/ui.json
index 1ec5b39813..fe6005d02d 100644
--- a/qapi/ui.json
+++ b/qapi/ui.json
@@ -1548,6 +1548,9 @@
 # @show-fps:      Enable showing Guest Scanout's update rate (UPS) and
 #                 Surface render swap rate (FPS) on a status bar (default: off).
 #
+# @hw-cursor: Blend guest cursor plane
+#     (Since: Pending)
+#
 # Since: 2.12
 ##
 { 'union'   : 'DisplayOptions',
@@ -1556,7 +1559,9 @@
                 '*window-close'  : 'bool',
                 '*show-cursor'   : 'bool',
                 '*gl'            : 'DisplayGLMode',
-                '*show-fps'      : 'bool' },
+                '*show-fps'      : 'bool',
+                '*hw-cursor'     : 'bool' },
+
   'discriminator' : 'type',
   'data'    : {
       'gtk': { 'type': 'DisplayGTK', 'if': 'CONFIG_GTK' },
diff --git a/qemu-options.hx b/qemu-options.hx
index 163a3ac5d2..7a324edc7a 100644
--- a/qemu-options.hx
+++ b/qemu-options.hx
@@ -2078,7 +2078,7 @@ DEF("display", HAS_ARG, QEMU_OPTION_display,
     "-display gtk[,full-screen=on|off][,gl=on|off][,grab-on-hover=on|off]\n"
     "            [,show-tabs=on|off][,show-cursor=on|off][,window-close=on|off]\n"
     "            [,show-menubar=on|off][,connectors.<index>=<connector name>]\n"
-    "            [,input=on|off]\n"
+    "            [,input=on|off][,hw-cursor=on|off]\n"
 #endif
 #if defined(CONFIG_VNC)
     "-display vnc=<display>[,<optargs>]\n"
@@ -2180,6 +2180,8 @@ SRST
         ``input=on|off``        : Don't let host's HID devices control the guest
                                   if set to "off", defaults to "on"
 
+        ``hw-cursor=on|off`` : Blend cursor plane with the guest frame
+
     ``curses[,charset=<encoding>]``
         Display video output via curses. For graphics device models
         which support a text mode, QEMU can display this output using a
diff --git a/ui/gtk-egl.c b/ui/gtk-egl.c
index 6e9cd241e5..4e54c1547e 100644
--- a/ui/gtk-egl.c
+++ b/ui/gtk-egl.c
@@ -135,6 +135,26 @@ void gd_egl_update(DisplayChangeListener *dcl,
                    EGL_NO_SURFACE, EGL_NO_CONTEXT);
 }
 
+static void gd_egl_cursor_texture(VirtualConsole *vc)
+{
+#ifdef CONFIG_GBM
+    uint32_t texture;
+
+    glGenTextures(1, &texture);
+    glBindTexture(GL_TEXTURE_2D, texture);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+
+    glPixelStorei(GL_UNPACK_ROW_LENGTH_EXT, 0);
+    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, vc->gfx.cursor_fb.width,
+                 vc->gfx.cursor_fb.height, 0, GL_RGBA, GL_UNSIGNED_BYTE,
+                 vc->gfx.cursor_image);
+
+    egl_fb_setup_for_tex(&vc->gfx.cursor_fb, vc->gfx.cursor_fb.width,
+                         vc->gfx.cursor_fb.height, texture, true);
+#endif
+}
+
 void gd_egl_refresh(DisplayChangeListener *dcl)
 {
     VirtualConsole *vc = container_of(dcl, VirtualConsole, gfx.dcl);
@@ -150,6 +170,33 @@ void gd_egl_refresh(DisplayChangeListener *dcl)
         return;
     }
 
+    if (vc->gfx.cursor_image &&
+        (vc->gfx.cursor_moved || vc->gfx.cursor_image)) {
+        eglMakeCurrent(qemu_egl_display, vc->gfx.esurface,
+                       vc->gfx.esurface, vc->gfx.ectx);
+
+        egl_fb_blit(&vc->gfx.win_fb, &vc->gfx.guest_fb, !vc->gfx.y0_top);
+        if (vc->gfx.cursor_x > 0 &&
+            vc->gfx.cursor_x < vc->gfx.win_fb.width - 1 &&
+            vc->gfx.cursor_y > 0 &&
+            vc->gfx.cursor_y < vc->gfx.win_fb.height - 1) {
+            if (vc->gfx.new_cursor) {
+                gd_egl_cursor_texture(vc);
+                vc->gfx.new_cursor = false;
+            }
+
+            egl_texture_blend(vc->gfx.gls, &vc->gfx.win_fb,
+                              &vc->gfx.cursor_fb, vc->gfx.y0_top,
+                              vc->gfx.cursor_x, vc->gfx.cursor_y,
+                              vc->gfx.scale_x, vc->gfx.scale_y);
+        }
+
+        glFlush();
+        eglSwapBuffers(qemu_egl_display, vc->gfx.esurface);
+        vc->gfx.cursor_moved = false;
+        return;
+    }
+
     if (!vc->gfx.esurface) {
         gd_egl_init(vc);
         if (!vc->gfx.esurface) {
@@ -344,16 +391,24 @@ void gd_egl_scanout_flush(DisplayChangeListener *dcl,
     ws = gdk_window_get_scale_factor(window);
     ww = gdk_window_get_width(window) * ws;
     wh = gdk_window_get_height(window) * ws;
+
     egl_fb_setup_default(&vc->gfx.win_fb, ww, wh);
-    if (vc->gfx.cursor_fb.texture) {
-        egl_texture_blit(vc->gfx.gls, &vc->gfx.win_fb, &vc->gfx.guest_fb,
-                         vc->gfx.y0_top);
-        egl_texture_blend(vc->gfx.gls, &vc->gfx.win_fb, &vc->gfx.cursor_fb,
-                          vc->gfx.y0_top,
+    egl_fb_blit(&vc->gfx.win_fb, &vc->gfx.guest_fb, !vc->gfx.y0_top);
+    if (vc->gfx.cursor_image &&
+        vc->gfx.cursor_x > 0 &&
+        vc->gfx.cursor_x < vc->gfx.win_fb.width - 1 &&
+        vc->gfx.cursor_y > 0 &&
+        vc->gfx.cursor_y < vc->gfx.win_fb.height - 1) {
+        if (vc->gfx.new_cursor) {
+            gd_egl_cursor_texture(vc);
+            vc->gfx.new_cursor = false;
+        }
+
+        egl_texture_blend(vc->gfx.gls, &vc->gfx.win_fb,
+                          &vc->gfx.cursor_fb, vc->gfx.y0_top,
                           vc->gfx.cursor_x, vc->gfx.cursor_y,
                           vc->gfx.scale_x, vc->gfx.scale_y);
-    } else {
-        egl_fb_blit(&vc->gfx.win_fb, &vc->gfx.guest_fb, !vc->gfx.y0_top);
+        vc->gfx.cursor_moved = false;
     }
 
 #ifdef CONFIG_GBM
diff --git a/ui/gtk.c b/ui/gtk.c
index 4dfe99ca38..f804afdbf4 100644
--- a/ui/gtk.c
+++ b/ui/gtk.c
@@ -457,9 +457,13 @@ static void gd_mouse_set(DisplayChangeListener *dcl,
     GtkDisplayState *s = vc->s;
     GdkDisplay *dpy = gtk_widget_get_display(vc->gfx.drawing_area);
     gint x_root, y_root;
+    gint x_origin, y_origin;
+    int new_cursor_x;
+    int new_cursor_y;
+    bool hw_cursor = s->opts->has_hw_cursor && s->opts->hw_cursor;
 
     if (!gtk_widget_get_realized(vc->gfx.drawing_area) ||
-        qemu_input_is_absolute(dcl->con)) {
+        (!hw_cursor && qemu_input_is_absolute(dcl->con))) {
         return;
     }
 
@@ -478,17 +482,36 @@ static void gd_mouse_set(DisplayChangeListener *dcl,
                                x * vc->gfx.scale_x, y * vc->gfx.scale_y,
                                &x_root, &y_root);
 
-    gdk_device_warp(gd_get_pointer(dpy),
-                    gtk_widget_get_screen(vc->gfx.drawing_area),
-                    x_root, y_root);
-    s->last_x = x;
-    s->last_y = y;
+    gdk_window_get_origin(gtk_widget_get_window(vc->gfx.drawing_area),
+                          &x_origin, &y_origin);
+
+    if (hw_cursor) {
+        new_cursor_x = x_root - x_origin;
+        new_cursor_y = y_root - y_origin;
+
+        if (vc->gfx.cursor_x != new_cursor_x ||
+            vc->gfx.cursor_y != new_cursor_y) {
+            vc->gfx.cursor_moved = true;
+            vc->gfx.cursor_x = new_cursor_x;
+            vc->gfx.cursor_y = new_cursor_y;
+        }
+    } else {
+        dpy = gtk_widget_get_display(vc->gfx.drawing_area);
+
+        gdk_device_warp(gd_get_pointer(dpy),
+                        gtk_widget_get_screen(vc->gfx.drawing_area),
+                        x_root, y_root);
+
+        vc->s->last_x = x;
+        vc->s->last_y = y;
+    }
 }
 
 static void gd_cursor_define(DisplayChangeListener *dcl,
                              QEMUCursor *c)
 {
     VirtualConsole *vc = container_of(dcl, VirtualConsole, gfx.dcl);
+    GtkDisplayState *s = vc->s;
     GdkPixbuf *pixbuf;
     GdkCursor *cursor;
 
@@ -496,16 +519,23 @@ static void gd_cursor_define(DisplayChangeListener *dcl,
         return;
     }
 
-    pixbuf = gdk_pixbuf_new_from_data((guchar *)(c->data),
-                                      GDK_COLORSPACE_RGB, true, 8,
-                                      c->width, c->height, c->width * 4,
-                                      NULL, NULL);
-    cursor = gdk_cursor_new_from_pixbuf
-        (gtk_widget_get_display(vc->gfx.drawing_area),
-         pixbuf, c->hot_x, c->hot_y);
-    gdk_window_set_cursor(gtk_widget_get_window(vc->gfx.drawing_area), cursor);
-    g_object_unref(pixbuf);
-    g_object_unref(cursor);
+    if (s->opts->has_hw_cursor && s->opts->hw_cursor) {
+        vc->gfx.cursor_image = c->data;
+        vc->gfx.cursor_fb.width = c->width;
+        vc->gfx.cursor_fb.height = c->height;
+        vc->gfx.new_cursor = true;
+    } else {
+        pixbuf = gdk_pixbuf_new_from_data((guchar *)(c->data),
+                                          GDK_COLORSPACE_RGB, true, 8,
+                                          c->width, c->height, c->width * 4,
+                                          NULL, NULL);
+        cursor = gdk_cursor_new_from_pixbuf
+            (gtk_widget_get_display(vc->gfx.drawing_area),
+             pixbuf, c->hot_x, c->hot_y);
+        gdk_window_set_cursor(gtk_widget_get_window(vc->gfx.drawing_area), cursor);
+        g_object_unref(pixbuf);
+        g_object_unref(cursor);
+    }
 }
 
 static void gd_switch(DisplayChangeListener *dcl,
-- 
2.43.0

